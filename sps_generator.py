"""
SPSS syntax (.sps) file generation.
Creates GET DATA, VALUE LABELS, and SAVE OUTFILE blocks.
"""

from typing import Dict, List, Optional
from utils import format_spss_path, escape_spss_string, sanitize_variable_name
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def generate_sps_syntax(
    excel_path: str,
    mappings: Dict[str, Dict[str, int]],
    original_names: Dict[str, str],
    sheet_name: str = 'Sheet1',
    include_save: bool = False,
    save_path: Optional[str] = None
) -> str:
    """
    Generate complete SPSS syntax file content.
    
    Args:
        excel_path: Path to the encoded Excel file
        mappings: Dictionary of column_name -> {value: code} mappings
        original_names: Dictionary of sanitized_name -> original_name
        sheet_name: Sheet name in Excel file
        include_save: Whether to include SAVE OUTFILE command
        save_path: Path for .sav file (if include_save is True)
        
    Returns:
        Complete SPSS syntax as string
    """
    lines = []
    
    # Header comment
    lines.append("* Auto-generated by SPSS Prep Tool")
    lines.append("* This script imports encoded data and applies value labels")
    lines.append("* Original column names are preserved as variable labels")
    lines.append("")
    
    # GET DATA block
    lines.append("GET DATA")
    lines.append("  /TYPE=XLSX")
    lines.append(f'  /FILE="{format_spss_path(excel_path)}"')
    lines.append(f'  /SHEET=name "{sheet_name}"')
    lines.append("  /READNAMES=ON.")
    lines.append("")
    
    # VALUE LABELS block
    if mappings:
        value_labels = generate_value_labels_block(mappings, original_names)
        lines.append(value_labels)
        lines.append("")
    
    # VARIABLE LABELS (show original names if sanitized)
    var_labels = generate_variable_labels_block(original_names)
    if var_labels:
        lines.append(var_labels)
        lines.append("")
    
    # SAVE OUTFILE (optional)
    if include_save:
        if not save_path:
            save_path = excel_path.replace('.xlsx', '.sav')
        lines.append(f'SAVE OUTFILE="{format_spss_path(save_path)}".')
        lines.append("")
    
    # Execute
    lines.append("EXECUTE.")
    
    syntax = '\n'.join(lines)
    logger.info("Generated SPSS syntax")
    return syntax


def generate_value_labels_block(
    mappings: Dict[str, Dict[str, int]],
    original_names: Dict[str, str]
) -> str:
    """
    Generate VALUE LABELS block for SPSS syntax.
    
    Args:
        mappings: Dictionary of column_name -> {value: code} mappings
        original_names: Dictionary of sanitized_name -> original_name
        
    Returns:
        VALUE LABELS block as string
    """
    lines = ["VALUE LABELS"]
    
    var_lines = []
    for col_name, mapping in mappings.items():
        # Use sanitized name
        sanitized = sanitize_variable_name(col_name)
        
        # Sort by numeric code
        sorted_items = sorted(mapping.items(), key=lambda x: x[1])
        
        # Build value label pairs
        label_pairs = []
        for value, code in sorted_items:
            escaped_value = escape_spss_string(str(value))
            label_pairs.append(f"{code} '{escaped_value}'")
        
        # Join all pairs for this variable
        var_line = f"  {sanitized} " + ' '.join(label_pairs)
        var_lines.append(var_line)
    
    # Join all variable lines - each needs a slash except the last which gets a period
    if var_lines:
        # Add forward slash after each variable except the last
        for var_line in var_lines[:-1]:
            lines.append(var_line + ' /')
        # Last line gets period
        lines.append(var_lines[-1] + '.')
    
    return '\n'.join(lines)


def generate_variable_labels_block(original_names: Dict[str, str]) -> str:
    """
    Generate VARIABLE LABELS block to preserve original column names.
    
    Args:
        original_names: Dictionary of sanitized_name -> original_name
        
    Returns:
        VARIABLE LABELS block as string, or empty string if not needed
    """
    lines = []
    
    # Only include if names were actually changed
    changed_names = {
        sanitized: original 
        for sanitized, original in original_names.items() 
        if sanitized != original
    }
    
    if not changed_names:
        return ""
    
    lines.append("VARIABLE LABELS")
    
    var_lines = []
    for sanitized, original in changed_names.items():
        escaped_original = escape_spss_string(original)
        var_lines.append(f"  {sanitized} '{escaped_original}'")
    
    if var_lines:
        # Add forward slash after each variable except the last
        for var_line in var_lines[:-1]:
            lines.append(var_line + ' /')
        # Last line gets period
        lines.append(var_lines[-1] + '.')
    
    return '\n'.join(lines)


def save_sps_file(syntax: str, output_path: str) -> None:
    """
    Save SPSS syntax to .sps file.
    
    Args:
        syntax: SPSS syntax content
        output_path: Path to output .sps file
    """
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(syntax)
    logger.info(f"Saved SPSS syntax to: {output_path}")

